---
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

const entry = (await getEntry(
  "contact",
  "-index",
)) as CollectionEntry<"contact">;
const { title, description, info } = entry.data;
---

<Base title={title} description={description}>
  <section class="section">
    <div class="container">
      <h1 class="font-normal" set:html={markdownify(title)} />
      <div class="section row pb-0">
        <div class="col-12 md:col-6 lg:col-7">
          <form id="contact-form" class="contact-form">
            <div class="mb-3">
              <input
                class="form-input w-full rounded"
                name="name"
                type="text"
                placeholder="Name"
                required
              />
            </div>
            <div class="mb-3">
              <input
                class="form-input w-full rounded"
                name="email"
                type="email"
                placeholder="Your email"
                required
              />
            </div>
            <div class="mb-3">
              <input
                class="form-input w-full rounded"
                name="subject"
                type="text"
                placeholder="Subject"
                required
              />
            </div>
            <div class="mb-3">
              <textarea
                class="form-textarea w-full rounded-md"
                name="message"
                rows="7"
                placeholder="Your message"
                required></textarea>
            </div>
            <input type="hidden" name="utm_source" />
            <input type="hidden" name="utm_medium" />
            <input type="hidden" name="utm_campaign" />
            <input type="hidden" name="utm_content" />
            <input type="hidden" name="utm_term" />
            <input type="hidden" name="source" />
            <input type="hidden" name="medium" />
            <input type="hidden" name="campaign" />
            <input type="hidden" name="content" />
            <input type="hidden" name="term" />
            <input type="hidden" name="Pais" value="Estados Unidos" />
            <input type="hidden" name="Marca" value="BudgetBee" />
            <input type="hidden" name="referrer" />
            <input type="hidden" name="userAgent" />
            <input type="hidden" name="pageUrl" />
            <input type="hidden" name="formSource" value="contact-form" />
            <input type="hidden" name="formName" value="Contact Form" />
            <button type="submit" class="btn btn-primary" id="submit-btn"
              >Send Now</button
            >
            <div id="form-message" class="mt-4 hidden"></div>
          </form>
        </div>
        <div class="content col-12 md:col-6 lg:col-5">
          <h4 set:html={markdownify(info?.title)} />
          <p class="mt-4" set:html={markdownify(info?.description)} />
          <ul class="contact-list mt-5 list-none pl-0">
            {
              info?.contacts?.map((contact) => (
                <li>
                  <strong
                    class="text-text-dark"
                    set:html={markdownify(contact)}
                  />
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </div>
  </section>
</Base>

<script>
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const submitBtn = document.getElementById("submit-btn") as HTMLButtonElement;
  const formMessage = document.getElementById("form-message") as HTMLDivElement;

  const UTM_KEYS = [
    "utm_source",
    "utm_medium",
    "utm_campaign",
    "utm_content",
    "utm_term",
  ];

  const PLAIN_KEYS = ["source", "medium", "campaign", "content", "term"];

  const STATIC_FIELDS: Record<string, string> = {
    Pais: "Estados Unidos",
    Marca: "BudgetBee",
    formSource: "contact-form",
    formName: "Contact Form",
  };

  const safeSessionGet = (key: string) => {
    if (typeof window === "undefined") return null;
    try {
      return window.sessionStorage.getItem(key);
    } catch (error) {
      console.debug("sessionStorage unavailable", error);
      return null;
    }
  };

  function setHiddenField(name: string, value: string | null | undefined) {
    const input = form.querySelector<HTMLInputElement>(`input[name="${name}"]`);
    if (!input) return;
    if (typeof value === "string" && value.trim().length > 0) {
      input.value = value;
    } else if (STATIC_FIELDS[name]) {
      input.value = STATIC_FIELDS[name];
    } else {
      input.value = "";
    }
  }

  function populateHiddenFields() {
    const urlParams = new URLSearchParams(window.location.search);
    const storedUtms: Record<string, string> = {};

    UTM_KEYS.forEach((key) => {
      const stored = safeSessionGet(key);
      if (stored) {
        storedUtms[key] = stored;
      }
    });

    UTM_KEYS.forEach((key) => {
      const value =
        urlParams.get(key) ?? storedUtms[key] ?? safeSessionGet(key);
      setHiddenField(key, value);
    });

    // Mirror UTM values into plain source/medium/etc keys
    PLAIN_KEYS.forEach((plainKey, index) => {
      const utmValue = form.querySelector<HTMLInputElement>(
        `input[name="${UTM_KEYS[index]}"]`,
      )?.value;
      setHiddenField(plainKey, utmValue || "");
    });

    setHiddenField("Pais", STATIC_FIELDS.Pais);
    setHiddenField("Marca", STATIC_FIELDS.Marca);
    setHiddenField("referrer", document.referrer || "");
    setHiddenField("userAgent", navigator.userAgent || "");
    setHiddenField("pageUrl", window.location.href);
    setHiddenField("formSource", STATIC_FIELDS.formSource);
    setHiddenField("formName", STATIC_FIELDS.formName);
  }

  populateHiddenFields();

  document.addEventListener("astro:page-load", populateHiddenFields);

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    populateHiddenFields();

    // Get form data
    const formData = new FormData(form);
    const data: Record<string, unknown> = {};

    formData.forEach((value, key) => {
      if (typeof value === "string") {
        data[key] = value;
      }
    });

    // Ensure tracking fields mirror each other
    UTM_KEYS.forEach((utmKey, index) => {
      const plainKey = PLAIN_KEYS[index];
      if (!data[utmKey] && data[plainKey]) {
        data[utmKey] = data[plainKey];
      } else if (data[utmKey] && !data[plainKey]) {
        data[plainKey] = data[utmKey];
      }
    });

    data.referrer = data.referrer || document.referrer || "";
    data.userAgent = data.userAgent || navigator.userAgent || "";
    data.pageUrl = data.pageUrl || window.location.href;
    data.formSource = STATIC_FIELDS.formSource;
    data.formName = STATIC_FIELDS.formName;
    data.Pais = data.Pais || STATIC_FIELDS.Pais;
    data.Marca = data.Marca || STATIC_FIELDS.Marca;

    // Disable submit button and show loading state
    submitBtn.disabled = true;
    submitBtn.textContent = "Sending...";
    formMessage.classList.add("hidden");

    try {
      const response = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      let result: any = null;
      try {
        result = await response.json();
      } catch (_) {
        // ignore JSON parsing error; we'll display a generic message below
      }

      if (response.ok) {
        // Success
        formMessage.textContent =
          "Thank you! Your message has been sent successfully.";
        formMessage.className = "mt-4 p-4 bg-green-100 text-green-700 rounded";
        form.reset();
      } else {
        // Error
        formMessage.textContent =
          (result && result.message) ||
          "Sorry, there was an error sending your message.";
        formMessage.className = "mt-4 p-4 bg-red-100 text-red-700 rounded";
      }
    } catch (error) {
      // Network error
      formMessage.textContent =
        "Sorry, there was a network error. Please try again later.";
      formMessage.className = "mt-4 p-4 bg-red-100 text-red-700 rounded";
    } finally {
      // Re-enable submit button
      submitBtn.disabled = false;
      submitBtn.textContent = "Send Now";
      formMessage.classList.remove("hidden");
    }
  });
</script>
